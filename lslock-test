#!/usr/bin/python3

import fcntl, os
from multiprocessing import Process, Pipe, Event
import subprocess
import string, random
import time
from sys import exc_info
DEVNULL = open('/dev/null', 'w')
NUMFILES = 5 #The number of test files to create.
testdir = '/tmp/lslock-test/'

try:
    if not os.path.isdir(testdir):
        os.makedirs(testdir) #If test directory does not exist, create it.
except:
    print('File by the name of test directory %s exists. Failure.' \
        % testdir)
    exit(1)

def gen_filename(size = 6, chars = string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))
    #Source:  Stack Overflow (http://goo.gl/d1EXAg)
    #Returns a 6-character random filename composed of
    #digits and the uppercase alphabet.

def lockfile(testfile, locktype, waitevent):
    try:
        if locktype == 1:
            f = open(testfile, 'r')
            fcntl.flock(f.fileno(), fcntl.LOCK_SH)
                #Source: http://effbot.org/librarybook/fcntl.htm
        elif locktype == 2:
            f = open(testfile, 'r+')
            fcntl.flock(f.fileno(), fcntl.LOCK_EX)
        waitevent.wait()
            #make the child process wait for test script
            #to execute and find the locks before exiting
            #so that locks are kept alive to be found
        f.close()
    except:
        print('Attempt to lock file failed: "%s".' % exc_info()[0])

if __name__ == '__main__':
    masterwaitevent = Event()
    testfilelist = list()
    procs = list()
    num_locks = 0
    for _ in range(NUMFILES):
        testfile = testdir + gen_filename()
        tolock = random.randint(0, 2)
        if subprocess.call(['touch', testfile], stderr=DEVNULL):
            print('Unable to touch test file %s.' % testfile)
            exit(1)
        if tolock:
            p = Process(target=lockfile, \
                args=(testfile, tolock, masterwaitevent))
            procs.append(p)
            p.start()
            testfilelist.append(str(p.pid) + ' : ' + testfile)
                #generating the expected output

    testscript = os.path.dirname( \
        os.path.realpath(__file__)) + '/lslock' #name of script to test
    testoutput = subprocess.check_output( \
        ['python3', testscript, testdir] \
        ).decode('utf-8').splitlines() #run the script and get the output
    testoutputset = {i for i in testoutput}
        #Cost of checking whether an element of testfilelist
        #is in set testoutputset is O(1),
        #hence total cost is O(n) where n = len(testfilelist).
    diditfail = False
    for line in testfilelist:
        if line not in testoutputset:
            print('Failed: %s is not in the test output' % line)
            diditfail = True
    if not diditfail:
        print('Passed')
        
    masterwaitevent.set()
        #Now that the tests are done, we can let
        #the child processes close the files and exit 
    for p in procs:
        p.join()

DEVNULL.close()
'''test cases:
0. File as parameter rather than directory //caught by directory check
1. Hard link: same inode, no point
2. Soft link: target inode gets locked if you lock either link or target
3. Rubbish input: caught by directory check
4. Malicious input: caught by directory check (Python sanitizes)
'''
